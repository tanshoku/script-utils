#!/bin/zsh
#
# Author:       Elizabeth Bodaneze                               2017-2020
# Description:  wrapper for scanning drawings with scanimage + imagemagick
# Requires:     zsh, sane-utils, sane, imagemagick
#

## defaults
device="epsonscan2:ut:esci2:usb:ES010C:316"
gamma="2.0"
prefix="sketch"
ext="jpg"
quality=92
tot_pages=1
mode="Grayscale"
bri_con="10x8"
rotation=0
dpi="200dpi"
l_m="0.2mm"
t_m="0.2mm"
x_m="208mm"
y_m="294.0mm"
scale="100%"


usage="\
Usage: scan -[a int] -[g|c] -[H|D] -L\n\
            -[nbC]\n\
            -[x str] -[s int] -[q int] -[d int]\n\
            -h\n\
\n\
Options:\n\
  -a int  number of pages to be scanned\n\
  -g      grayscale\n\
  -c      colour\n\
  -H      higher resolution\n\
  -D      scan at high resolution then downscale\n\
  -L      rotate the image 270 degrees clockwise\n\
  -n      do not prepend the filename with '${prefix}'\n\
  -b      do not adjust gamma\n\
  -C      do not crop the page\n\
  -x str  file output extension\n\
  -s int  scale image to int%\n\
  -q int  specify image compression level\n\
  -d int  specify dpi\n\
  -h      this help text\n\
\n\
Default options are: scan -${${mode:l}:0:1}a${tot_pages} -x ${ext}\
 -s ${scale:0:-1} -q ${quality} -d ${dpi:0:-3}\n"


while getopts ":a:gcHDLnbCx:s:q:d:h" opt; do
  case "$opt" in
    "a") tot_pages=$OPTARG                                                ;;
    "g") mode="Grayscale"      ; m_key+="\e[0mg"                          ;;
    "c") mode="Color"          ; m_key+="\e[94;1mc"                       ;;
    "H") dpi="600dpi"          ; m_key+="\e[97mH"                         ;;
    "D") dpi="600dpi"          ; m_key+="\e[96mD\e[0m" ; scale="50%"      ;;
    "L") rotation=270          ; m_key+="\e[32mL\e[0m"                    ;;
    "n") prefix=""             ; m_key+="\e[90mn\e[0m"                    ;;
    "b") gamma="2.2"           ; m_key+="\e[95mb"                         ;; 
    "C") l_m="0mm" ; t_m="0mm" ; x_m="215.9mm"         ; y_m="296.926mm"  ;;
    "x") ext=$OPTARG                                                      ;;
    "s") scale="${OPTARG}%"                                               ;;
    "q") quality=$OPTARG                                                  ;;
    "d") dpi="${OPTARG}dpi"                                               ;;
    "h") echo -n "$usage"      ; exit 0                                   ;;
    "?") echo -n "$usage"      ; exit 1                                   ;;
  esac
done


## internal defaults
[[ $m_key != *c* && $m_key != *g* ]] && m_key+="\e[0mg"
m_key=$(echo -n "${m_key}\e[0m")
i=1
c=0
page=0
_date=$(date +%y%m%d)
first=$i
last=$tot_pages


for ((i=first;i<=last;i++)); do
  file=${prefix}${_date}-$i.${ext}
  ((page++))

  if [[ -a $file ]] ; then
    c=0
    while [[ -a $file ]] ; do 
      ((i++))
      ((c++))
      file=${prefix}${_date}-$i.${ext}
      warn=$( echo -n "\e[33;1m +${c}!\e[0m")
    done

    (( last = i + tot_pages ))
  fi

  printf "\rProgress: 0.0%%   -  Scanning page %s/%s (%s%s)...\t[%s]\r" \
          "${page}" "${tot_pages}" "${file}" "${warn}" "${m_key}"

  scanimage -p                        \
            --gamma-correction $gamma \
            --mode $mode              \
            --resolution $dpi         \
            --format=tiff             \
            -l $l_m                   \
            -t $t_m                   \
            -x $x_m                   \
            -y $y_m                   \
  | convert -scale $scale             \
            -quality $quality         \
            -rotate $rotation         \
            -brightness-contrast      \
            -$bri_con                 \
            tiff:-                    \
            $file                     \
  || exit $?

  if (( page != tot_pages )); then
    printf "\e[KDone %s (%s/%s%s). Please press any key to proceed when ready."\
           "${file}" "${page}" "${tot_pages}" "${warn}"
    read -sk1
  else
    printf "\e[KLast page %s (%s/%s%s) done, exiting.\r"\
           "${file}" "${page}" "${tot_pages}" "${warn}"
    sleep 2
    printf "\e[K\r"
    exit 0
  fi

  printf "\e[1K"
  warn=''
done
